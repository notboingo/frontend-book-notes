{"ast":null,"code":"var _jsxFileName = \"C:\\\\book-directory\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Fetch all notes initially\n  useEffect(() => {\n    fetch('http://localhost:8080/notes').then(response => response.json()).then(data => {\n      console.log(\"Fetched all notes:\", data); // Debugging: Log all notes\n      setNotes(data);\n    });\n  }, []);\n\n  // Handle search functionality\n  const handleSearch = async () => {\n    console.log(\"Search query:\", searchQuery); // Debugging: Log search query\n    if (searchQuery.trim()) {\n      // Search notes based on the query\n      fetch(`http://localhost:8080/search?q=${searchQuery}`).then(response => response.json()).then(data => {\n        console.log(\"Search Results:\", data); // Debugging: Log search results\n\n        // Ensure search results are in expected format (array of results with `note_id`)\n        if (data.results && Array.isArray(data.results)) {\n          setSearchResults(data.results); // Update search results\n        } else {\n          console.error(\"Search results format is incorrect\", data);\n        }\n      }).catch(error => {\n        console.error(\"Error fetching search results:\", error);\n      });\n    } else {\n      setSearchResults([]); // Clear search results when the search query is empty\n    }\n  };\n\n  // Fetch note content when a title is clicked\n  const fetchNoteContent = id => {\n    console.log(\"Fetching content for note ID:\", id); // Debugging: Log note ID\n    if (id) {\n      fetch(`http://localhost:8080/notes/${id}`).then(response => response.json()).then(data => {\n        console.log(\"Fetched note:\", data); // Debugging: Log note data\n        setSelectedNote(data.content); // Set selected note content\n      }).catch(error => {\n        console.error(\"Error fetching note content:\", error);\n      });\n    } else {\n      console.error(\"Invalid note ID:\", id); // Debugging: Log invalid ID\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '300px',\n        borderRight: '1px solid #ccc',\n        paddingRight: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        placeholder: \"Search notes\",\n        style: {\n          width: '100%',\n          padding: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        style: {\n          padding: '10px',\n          marginTop: '10px'\n        },\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Book Titles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyle: 'none',\n          padding: 0\n        },\n        children: (searchQuery.trim() ? searchResults : notes).map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n          // Ensure that each note has a unique key\n          style: {\n            marginBottom: '10px',\n            cursor: 'pointer'\n          },\n          onClick: () => fetchNoteContent(note.note_id) // Ensure correct note_id is passed\n          ,\n          children: note.title\n        }, note.note_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        paddingLeft: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Note Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: selectedNote || \"Click on a title to view its content.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bYITm+VTtvjo+h7FUHtgW7y/72g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","notes","setNotes","selectedNote","setSelectedNote","searchQuery","setSearchQuery","searchResults","setSearchResults","fetch","then","response","json","data","console","log","handleSearch","trim","results","Array","isArray","error","catch","fetchNoteContent","id","content","style","display","padding","children","width","borderRight","paddingRight","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","marginTop","listStyle","map","note","marginBottom","cursor","note_id","title","flex","paddingLeft","whiteSpace","_c","$RefreshReg$"],"sources":["C:/book-directory/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Fetch all notes initially\n  useEffect(() => {\n    fetch('http://localhost:8080/notes')\n      .then(response => response.json())\n      .then(data => {\n        console.log(\"Fetched all notes:\", data); // Debugging: Log all notes\n        setNotes(data);\n      });\n  }, []);\n\n  // Handle search functionality\n  const handleSearch = async () => {\n    console.log(\"Search query:\", searchQuery);  // Debugging: Log search query\n    if (searchQuery.trim()) {\n      // Search notes based on the query\n      fetch(`http://localhost:8080/search?q=${searchQuery}`)\n        .then(response => response.json())\n        .then(data => {\n          console.log(\"Search Results:\", data);  // Debugging: Log search results\n\n          // Ensure search results are in expected format (array of results with `note_id`)\n          if (data.results && Array.isArray(data.results)) {\n            setSearchResults(data.results);  // Update search results\n          } else {\n            console.error(\"Search results format is incorrect\", data);\n          }\n        })\n        .catch(error => {\n          console.error(\"Error fetching search results:\", error);\n        });\n    } else {\n      setSearchResults([]);  // Clear search results when the search query is empty\n    }\n  };\n\n  // Fetch note content when a title is clicked\n  const fetchNoteContent = (id) => {\n    console.log(\"Fetching content for note ID:\", id); // Debugging: Log note ID\n    if (id) {\n      fetch(`http://localhost:8080/notes/${id}`)\n        .then(response => response.json())\n        .then(data => {\n          console.log(\"Fetched note:\", data);  // Debugging: Log note data\n          setSelectedNote(data.content); // Set selected note content\n        })\n        .catch(error => {\n          console.error(\"Error fetching note content:\", error);\n        });\n    } else {\n      console.error(\"Invalid note ID:\", id);  // Debugging: Log invalid ID\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex', padding: '20px' }}>\n      <div style={{ width: '300px', borderRight: '1px solid #ccc', paddingRight: '20px' }}>\n        <h2>Search Notes</h2>\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          placeholder=\"Search notes\"\n          style={{ width: '100%', padding: '10px' }}\n        />\n        <button onClick={handleSearch} style={{ padding: '10px', marginTop: '10px' }}>Search</button>\n\n        <h2>Book Titles</h2>\n        <ul style={{ listStyle: 'none', padding: 0 }}>\n          {(searchQuery.trim() ? searchResults : notes).map(note => (\n            <li\n              key={note.note_id} // Ensure that each note has a unique key\n              style={{ marginBottom: '10px', cursor: 'pointer' }}\n              onClick={() => fetchNoteContent(note.note_id)}  // Ensure correct note_id is passed\n            >\n              {note.title}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div style={{ flex: 1, paddingLeft: '20px' }}>\n        <h2>Note Content</h2>\n        <div style={{ whiteSpace: 'pre-wrap' }}>\n          {selectedNote || \"Click on a title to view its content.\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}