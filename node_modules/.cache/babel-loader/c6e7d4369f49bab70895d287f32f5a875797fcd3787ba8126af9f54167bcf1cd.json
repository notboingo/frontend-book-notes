{"ast":null,"code":"var _jsxFileName = \"C:\\\\book-directory\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [notes, setNotes] = useState([]); // State to store notes\n\n  // Fetch notes from the backend\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/notes'); // Ensure this URL is correct\n      const data = await response.json(); // Convert response to JSON\n      console.log('Fetched notes:', data); // Log to check the response\n      setNotes(data); // Set the fetched data to the state\n    } catch (error) {\n      console.error('Error fetching notes:', error); // Handle errors\n    }\n  };\n\n  // Fetch notes when the component is mounted\n  useEffect(() => {\n    fetchNotes(); // Call the fetchNotes function\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Book Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: `/note/${note.note_id}`,\n          children: note.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), \" \"]\n      }, note.note_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vOaC7rmji7ux6HtcIeocV+tl1oY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","notes","setNotes","fetchNotes","response","fetch","data","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","note","href","note_id","title","_c","$RefreshReg$"],"sources":["C:/book-directory/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [notes, setNotes] = useState([]); // State to store notes\n\n  // Fetch notes from the backend\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/notes'); // Ensure this URL is correct\n      const data = await response.json(); // Convert response to JSON\n      console.log('Fetched notes:', data); // Log to check the response\n      setNotes(data); // Set the fetched data to the state\n    } catch (error) {\n      console.error('Error fetching notes:', error); // Handle errors\n    }\n  };\n\n  // Fetch notes when the component is mounted\n  useEffect(() => {\n    fetchNotes(); // Call the fetchNotes function\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return (\n    <div className=\"App\">\n      <h1>Book Notes</h1>\n      <ul>\n        {notes.map((note) => (\n          <li key={note.note_id}>\n            <a href={`/note/${note.note_id}`}>{note.title}</a> {/* Link to note content */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAC7D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,IAAI,CAAC,CAAC,CAAC;MACrCJ,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACjD;EACF,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACdO,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAAc,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBlB,OAAA;MAAAc,QAAA,EACGX,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACdpB,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAGqB,IAAI,EAAE,SAASD,IAAI,CAACE,OAAO,EAAG;UAAAR,QAAA,EAAEM,IAAI,CAACG;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,KAAC;MAAA,GAD5CE,IAAI,CAACE,OAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAChB,EAAA,CAhCQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}